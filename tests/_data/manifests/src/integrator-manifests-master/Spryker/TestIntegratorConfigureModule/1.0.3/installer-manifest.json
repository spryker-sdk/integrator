{
    "configure-module": [
        {
            "target": "\\Pyz\\Zed\\TestIntegratorDefault\\TestIntegratorDefaultConfig::getTestConfigurationValue",
            "value": "\\Spryker\\Zed\\TestIntegratorConfigureModule\\TestIntegratorConfigureModuleConfig::TEST_CONFIG_MODULE"
        },
        {
            "target": "\\Pyz\\Zed\\TestIntegratorDefault\\TestIntegratorDefaultConfig::getTestConfigurationValue2",
            "value": "$this->getPathToRoot() . 'vendor/spryker/spryker/Bundles/'"
        },
        {
            "target": "\\Pyz\\Zed\\TestIntegratorDefault\\TestIntegratorDefaultConfig::getTestConfigurationValue3",
            "value": "APPLICATION_ROOT_DIR . DIRECTORY_SEPARATOR . 'phpcs.xml'"
        },
        {
            "target": "\\Pyz\\Zed\\TestIntegratorDefault\\TestIntegratorDefaultConfig::getTestConfigurationArray",
            "value": "\\Spryker\\Zed\\TestIntegratorConfigureModule\\TestIntegratorConfigureModuleConfig::TEST_CONFIG_MODULE_ADD"
        },
        {
            "target": "\\Pyz\\Zed\\TestIntegratorDefault\\TestIntegratorDefaultConfig::getTestConfigurationArray2",
            "value": "\\Spryker\\Zed\\TestIntegratorConfigureModule\\TestIntegratorConfigureModuleConfig::CONTENT_TYPE_PRICE => true"
        },
        {
            "target": "\\Pyz\\Zed\\TestIntegratorDefault\\TestIntegratorDefaultConfig::getTestConfigurationSophisticatedExpression",
            "value": "$templateList = [\n            CmsBlockCategoryConnectorConfig::CATEGORY_TEMPLATE_ONLY_CMS_BLOCK => '@CatalogPage/views/simple-cms-block/simple-cms-block.twig',\n            CmsBlockCategoryConnectorConfig::CATEGORY_TEMPLATE_WITH_CMS_BLOCK => '@CatalogPage/views/catalog-with-cms-block/catalog-with-cms-block.twig',\n        ];\n        $templateList += parent::getTemplateList();\n\n        return $templateList",
            "is_literal": true
        },
        {
            "target": "\\Pyz\\Zed\\TestIntegratorDefault\\TestIntegratorDefaultConfig::getTestConfigurationSophisticatedExpression2",
            "value": "$paymentMethodStatemachineMapping = $this->getPaymentMethodStatemachineMapping();\n\n        if (!array_key_exists($quoteTransfer->getPayment()->getPaymentSelection(), $paymentMethodStatemachineMapping)) {\n            return parent::determineProcessForOrderItem($quoteTransfer, $itemTransfer);\n        }\n\n        return $paymentMethodStatemachineMapping[$quoteTransfer->getPayment()->getPaymentSelection()]",
            "is_literal": true
        }
    ]
}
